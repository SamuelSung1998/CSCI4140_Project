{"version":3,"sources":["serviceWorker.ts","app/redux/history.ts","features/login/types.ts","features/logout/redux/slice.ts","features/logout/types.ts","features/login/redux/slice.ts","features/settings/redux/slice.ts","features/settings/types.ts","features/admin/redux/slice.ts","features/admin/types.ts","features/chat/redux/slice.ts","features/chat/types.ts","app/redux/root-reducer.ts","features/login/redux/epics.ts","features/login/api.ts","features/logout/redux/epics.ts","features/logout/api.mock.ts","features/settings/redux/epics.ts","features/settings/api.ts","features/admin/redux/epics.ts","features/admin/api.ts","features/chat/redux/epics.ts","features/chat/api.ts","app/redux/root-epic.ts","app/redux/index.ts","features/navigationBar/NavList.ts","features/navigationBar/index.tsx","features/login/FormPage.tsx","features/login/PromptPage.tsx","features/login/index.tsx","features/logout/FormPage.tsx","common/useTimeout.ts","features/logout/SuccessPage.tsx","features/logout/index.tsx","features/chat/ChatroomPage.tsx","features/chat/index.tsx","common/FormTextInput.tsx","common/FormSelect.tsx","features/settings/FormPage.tsx","features/settings/index.tsx","features/admin/TablePage.tsx","features/admin/index.tsx","common/Protected.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","history","createBrowserHistory","USER","ADMIN","IDLE","SUCCESS","FAILURE","logoutSlice","createSlice","name","initialState","status","reducers","logoutReq","state","logoutSuccess","actions","reducer","login","types","recoverLogin","username","group","token","errors","loginSlice","loginReq","action","loginSuccess","payload","loginFailure","loginFailureReset","recoverLoginReq","recoverLoginSuccess","recoverLoginFailure","extraReducers","builder","addCase","load","update","initialValues","id","email","phone","oldPassword","password","password2","settingsSlice","settingsLoadReq","settingsLoadSuccess","values","settingsLoadFailure","settingsUnload","settingsUpdateReq","settingsUpdateSuccess","settingsUpdateFailure","settingsFailureReset","usersListLoad","userLoad","userUpdate","usersList","adminSlice","usersListLoadReq","usersListLoadSuccess","list","usersListLoadFailure","userLoadReq","userLoadSuccess","value","userLoadFailure","userUnload","userUpdateReq","userUpdateSuccess","userUpdateFailure","userDeleteReq","adminFailureReset","adminUnload","connection","sendMessage","socket","chats","connectionReq","connectionSuccess","connectionFailure","connectionDisconnected","newIncomeMessage","message","sendMessageReq","sendMessageSuccess","sendMessageFailure","rootReducer","combineReducers","router","connectRouter","loginReducer","logout","logoutReducer","settings","settingsReducer","admin","adminReducer","chat","chatReducer","loginEpic","action$","pipe","ofType","mergeMap","ajax","url","method","headers","body","map","res","response","result","catchError","error","undefined","console","log","of","loginApi","rtn","keepLogin","cookie","Cookies","set","push","recoverLoginEpic","getAll","logoutEpic","remove","settingsLoadEpic","actions$","state$","Authorization","user","settingsLoadApi","settingsUpdateEpic","form","settingsUpdateApi","usersListLoadEpic","users","usersListLoadApi","userLoadEpic","targetId","userLoadApi","userUpdateEpic","userUpdateApi","userCreateApi","userDeleteEpic","userDeleteApi","connectionEpic","socketio","merge","fromEvent","time","connectionApi","sendmessageEpic","connected","emit","sendMessageApi","rootEpic","combineEpics","Object","loginEpics","logoutEpics","settingsEpic","adminEpic","chatEpic","epicMiddleware","createEpicMiddleware","enhancer","composeEnhancers","compose","applyMiddleware","routerMiddleware","store","createStore","run","NavList","address","groups","float","NavItems","navList","item","to","key","Nav","Link","NavDropdown","title","subtab","subitem","Item","NavBar","useSelector","currentNavList","filter","includes","Navbar","variant","collapseOnSelect","expand","Brand","href","Toggle","aria-controls","Collapse","className","loginSchema","Yup","shape","required","notRequired","LoginForm","useRouteMatch","dispatch","useDispatch","formik","useFormik","onSubmit","validationSchema","useEffect","Container","Form","handleSubmit","Alert","Row","Group","as","Col","md","Label","Control","type","isInvalid","touched","onChange","handleChange","placeholder","disabled","Feedback","Check","checked","label","Button","LoginPromptPage","Login","path","LogoutForm","Jumbotron","e","preventDefault","useTimeout","timeout","handleTimeout","useState","setTime","setTimeout","clearTimeout","SuccessPage","ChatroomPage","aria-hidden","src","alt","onClick","FormTextInput","useField","field","meta","isValid","column","sm","FormSelect","children","settingsSchema","min","max","oneOf","SettingsForm","settingsLoadStatus","settingsLoadErrors","settingsUpdateStatus","settingsUpdateErrors","isLoaded","ListGroup","err","enableReinitialize","handleReset","noValidate","Settings","updateSchema","UsersTable","editorGroup","currentEdit","setCurrentEdit","handleDelete","handleCancel","isAddUser","isUserLoaded","isEnable","Table","responsive","index","length","Protected","targetGroups","recoverLoginStatus","loginStatus","App","ReactDOM","render","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b2be52e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory, History } from 'history';\n\nconst history: History = createBrowserHistory();\n\n// create history\nexport default history;\n","// Group Constant\nexport const USER = 'user';\nexport const ADMIN = 'admin';\nexport const LOGGEDOUT = 'loggedout';\n\nexport type GroupType = typeof USER | typeof ADMIN | typeof LOGGEDOUT;\n\nexport const Groups: GroupType[] = [USER, ADMIN, LOGGEDOUT];\n\ninterface CommonUsersType {\n  username: string;\n  password: string;\n  id: string;\n  email: string;\n  phone: string;\n}\n\nexport interface UserType extends CommonUsersType {\n  group: typeof USER;\n}\n\nexport interface AdminType extends CommonUsersType {\n  group: typeof ADMIN;\n}\n\nexport type UsersType = UserType | AdminType;\n\n// Login Errors\nexport type LoginErrorType = string;\n\n// Status Keywords\nexport const IDLE = 'idle';\nexport const LOADING = 'loading';\nexport const SUCCESS = 'success';\nexport const FAILURE = 'failure';\n\ntype StatusType = typeof IDLE | typeof LOADING | typeof SUCCESS | typeof FAILURE;\n\n// Login State Interface\nexport interface LoginStateType {\n  status: {\n    login: StatusType;\n    recoverLogin: StatusType;\n  }\n  username: string;\n  group: GroupType;\n  token: string;\n  errors: LoginErrorType[];\n}\n\nexport interface LoginReqPayloadType {\n  email: string;\n  password: string;\n  keepLogin: boolean;\n}\n\nexport interface LoginSuccessPayloadType {\n  username: string;\n  token: string;\n  group: GroupType;\n}\n\nexport interface LoginFailPayloadType {\n  errors: LoginErrorType[],\n}\n\nexport interface RecoverLoginSuccessPayloadType {\n  username: string;\n  token: string;\n  group: GroupType;\n}\n","import { createSlice } from '@reduxjs/toolkit';\nimport * as types from '../types';\n\nconst logoutSlice = createSlice({\n  name: '@@logout',\n  initialState: {\n    status: types.IDLE,\n  } as types.LogoutStateType,\n  reducers: {\n    logoutReq: (state) => {\n      switch (state.status) {\n        case (types.IDLE):\n        case (types.SUCCESS):\n          return {\n            ...state,\n            status: types.LOADING,\n          };\n        default: return state;\n      }\n    },\n    logoutSuccess: (state) => {\n      switch (state.status) {\n        case (types.LOADING): {\n          return {\n            ...state,\n            status: types.SUCCESS,\n          };\n        }\n        default: return state;\n      }\n    },\n  },\n});\n\nexport const { actions, reducer } = logoutSlice;\nexport const { logoutReq, logoutSuccess } = actions;\nexport default logoutSlice;\n","// Status Keywords\nexport const IDLE = 'idle';\nexport const LOADING = 'loading';\nexport const SUCCESS = 'success';\n\ntype StatusType = typeof IDLE | typeof LOADING | typeof SUCCESS;\n\n// system state interface\nexport interface LogoutStateType {\n  status: StatusType;\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport * as types from '../types';\nimport { logoutSuccess } from '../../logout/redux/slice';\n\nconst initialState: types.LoginStateType = {\n  status: {\n    login: types.IDLE,\n    recoverLogin: types.IDLE,\n  },\n  username: '',\n  group: types.LOGGEDOUT,\n  token: '',\n  errors: [],\n};\n\nconst loginSlice = createSlice({\n  name: '@@login',\n  initialState,\n  reducers: {\n    loginReq: (state, action: PayloadAction<types.LoginReqPayloadType>) => {\n      switch (state.status.recoverLogin) {\n        case (types.SUCCESS):\n        case (types.FAILURE):\n          switch (state.status.login) {\n            case (types.IDLE):\n            case (types.SUCCESS):\n            case (types.FAILURE):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  login: types.LOADING,\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    loginSuccess: (state, action: PayloadAction<types.LoginSuccessPayloadType>) => {\n      switch (state.status.recoverLogin) {\n        case (types.SUCCESS):\n        case (types.FAILURE):\n          switch (state.status.login) {\n            case (types.LOADING): {\n              const { username, token, group } = action.payload;\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  login: types.SUCCESS,\n                },\n                username,\n                group,\n                token,\n              };\n            }\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    loginFailure: (state, action: PayloadAction<types.LoginFailPayloadType>) => {\n      switch (state.status.recoverLogin) {\n        case (types.SUCCESS):\n        case (types.FAILURE):\n          switch (state.status.login) {\n            case (types.LOADING):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  login: types.FAILURE,\n                },\n                username: '',\n                group: types.LOGGEDOUT,\n                token: '',\n                errors: action.payload.errors,\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    loginFailureReset: (state) => {\n      switch (state.status.recoverLogin) {\n        case (types.SUCCESS):\n        case (types.FAILURE):\n          switch (state.status.login) {\n            case (types.FAILURE):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  login: types.IDLE,\n                },\n                errors: [],\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    recoverLoginReq: (state) => {\n      switch (state.status.recoverLogin) {\n        case (types.IDLE):\n          switch (state.status.login) {\n            case (types.IDLE):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  recoverLogin: types.LOADING,\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    recoverLoginSuccess: (state, action: PayloadAction<types.RecoverLoginSuccessPayloadType>) => {\n      switch (state.status.recoverLogin) {\n        case (types.LOADING):\n          switch (state.status.login) {\n            case (types.IDLE):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  login: types.SUCCESS,\n                  recoverLogin: types.SUCCESS,\n                },\n                token: action.payload.token,\n                group: action.payload.group,\n                username: action.payload.username,\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    recoverLoginFailure: (state) => {\n      switch (state.status.recoverLogin) {\n        case (types.LOADING):\n          switch (state.status.login) {\n            case (types.IDLE):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  recoverLogin: types.FAILURE,\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutSuccess, (state) => {\n      switch (state.status.login) {\n        case (types.SUCCESS):\n          return {\n            ...initialState,\n            status: {\n              ...initialState.status,\n              recoverLogin: state.status.recoverLogin,\n            },\n          };\n        default: return state;\n      }\n    });\n  },\n});\n\nexport const { actions, reducer } = loginSlice;\nexport const {\n  loginReq,\n  loginSuccess,\n  loginFailure,\n  loginFailureReset,\n  recoverLoginReq,\n  recoverLoginSuccess,\n  recoverLoginFailure,\n} = actions;\nexport default loginSlice;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport * as types from '../types';\nimport { USER } from '../../login/types';\n\nconst initialState: types.SettingsStateType = {\n  status: {\n    load: types.IDLE,\n    update: types.IDLE,\n  },\n  initialValues: {\n    id: '',\n    username: '',\n    email: '',\n    phone: '',\n    group: USER,\n    oldPassword: '',\n    password: '',\n    password2: '',\n  },\n  errors: {\n    load: [],\n    update: [],\n  },\n};\n\nconst settingsSlice = createSlice({\n  name: '@@settings',\n  initialState,\n  reducers: {\n    settingsLoadReq: (state) => {\n      switch (state.status.load) {\n        case (types.IDLE):\n        case (types.SUCCESS):\n        case (types.FAILURE):\n          switch (state.status.update) {\n            case (types.IDLE):\n            case (types.SUCCESS):\n            case (types.FAILURE):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  load: types.LOADING,\n                },\n                errors: {\n                  ...state.errors,\n                  load: [],\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    settingsLoadSuccess: (state, action: PayloadAction<types.SettingsLoadSuccessPayloadType>) => {\n      switch (state.status.load) {\n        case (types.LOADING):\n          switch (state.status.update) {\n            case (types.IDLE):\n            case (types.SUCCESS):\n            case (types.FAILURE):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  load: types.SUCCESS,\n                },\n                initialValues: {\n                  ...state.initialValues,\n                  ...action.payload.values,\n                },\n                errors: {\n                  ...state.errors,\n                  load: [],\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    settingsLoadFailure: (state, action: PayloadAction<types.SettingsLoadFailurePayloadType>) => {\n      switch (state.status.load) {\n        case (types.LOADING):\n          switch (state.status.update) {\n            case (types.IDLE):\n            case (types.SUCCESS):\n            case (types.FAILURE):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  load: types.FAILURE,\n                },\n                initialValues: initialState.initialValues,\n                errors: {\n                  ...state.errors,\n                  load: action.payload.errors,\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    settingsUnload: (state) => initialState,\n    settingsUpdateReq: (state, action: PayloadAction<types.SettingsUpdateReqPayloadType>) => {\n      switch (state.status.load) {\n        case (types.SUCCESS):\n          switch (state.status.update) {\n            case (types.IDLE):\n            case (types.SUCCESS):\n            case (types.FAILURE):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  update: types.LOADING,\n                },\n                errors: {\n                  ...state.errors,\n                  update: [],\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    settingsUpdateSuccess: (state) => {\n      switch (state.status.load) {\n        case (types.SUCCESS):\n          switch (state.status.update) {\n            case (types.LOADING):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  load: types.IDLE, // let the form to load the latest data again\n                  update: types.SUCCESS,\n                },\n                errors: {\n                  ...state.errors,\n                  update: [],\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    settingsUpdateFailure: (state, action: PayloadAction<types.SettingsUpdateFailurePayloadType>) => {\n      switch (state.status.load) {\n        case (types.SUCCESS):\n          switch (state.status.update) {\n            case (types.LOADING):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  update: types.FAILURE,\n                },\n                errors: {\n                  ...state.errors,\n                  update: action.payload.errors,\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    settingsFailureReset: (state) => ({\n      ...state,\n      status: {\n        load: state.status.load === types.FAILURE ? types.IDLE : state.status.load,\n        update: state.status.update === types.FAILURE ? types.IDLE : state.status.update,\n      },\n      errors: {\n        load: [],\n        update: [],\n      },\n    }),\n  },\n});\n\nexport const { actions, reducer } = settingsSlice;\nexport const {\n  settingsLoadReq,\n  settingsLoadSuccess,\n  settingsLoadFailure,\n  settingsUnload,\n  settingsUpdateReq,\n  settingsUpdateSuccess,\n  settingsUpdateFailure,\n  settingsFailureReset,\n} = actions;\nexport default settingsSlice;\n","import { UsersType } from '../login/types';\n\n// Settings Errors\nexport type SettingsErrorType = string;\n\n// Status Keywords\nexport const IDLE = 'idle';\nexport const LOADING = 'loading';\nexport const SUCCESS = 'success';\nexport const FAILURE = 'failure';\n\ntype StatusType = typeof IDLE | typeof LOADING | typeof SUCCESS | typeof FAILURE;\n\n// UserInfoType Type\nexport type UserInfoType = Omit<UsersType, 'password'>;\n\nexport interface FormType extends UserInfoType {\n  oldPassword: string;\n  password: string;\n  password2: string;\n}\n\n// Settings State Interface\nexport interface SettingsStateType {\n  status: {\n    load: StatusType;\n    update: StatusType;\n  }\n  initialValues: FormType;\n  errors: {\n    load: SettingsErrorType[],\n    update: SettingsErrorType[],\n  }\n}\n\n// Settings State Interface\nexport interface SettingsLoadSuccessPayloadType {\n  values: UserInfoType;\n}\n\nexport interface SettingsLoadFailurePayloadType {\n  errors: SettingsErrorType[],\n}\n\nexport interface SettingsUpdateReqPayloadType {\n  form: FormType\n}\n\nexport interface SettingsUpdateFailurePayloadType {\n  errors: SettingsErrorType[],\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport * as types from '../types';\nimport { USER } from '../../login/types';\n\nconst initialState: types.AdminStateType = {\n  status: {\n    usersListLoad: types.IDLE,\n    userLoad: types.IDLE,\n    userUpdate: types.IDLE,\n  },\n  usersList: [],\n  initialValues: {\n    id: '',\n    username: '',\n    email: '',\n    phone: '',\n    group: USER,\n    password: '',\n    password2: '',\n  },\n  errors: {\n    usersListLoad: [],\n    userLoad: [],\n    userUpdate: [],\n  },\n};\n\nconst adminSlice = createSlice({\n  name: '@@admin',\n  initialState,\n  reducers: {\n    usersListLoadReq: (state) => {\n      switch (state.status.usersListLoad) {\n        case (types.IDLE):\n        case (types.SUCCESS):\n        case (types.FAILURE):\n          switch (state.status.userLoad) {\n            case (types.IDLE):\n            case (types.SUCCESS):\n            case (types.FAILURE):\n              switch (state.status.userUpdate) {\n                case (types.IDLE):\n                case (types.SUCCESS):\n                case (types.FAILURE):\n                  return {\n                    ...state,\n                    status: {\n                      ...state.status,\n                      usersListLoad: types.LOADING,\n                    },\n                    errors: {\n                      ...state.errors,\n                      usersListLoad: [],\n                    },\n                  };\n                default: return state;\n              }\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    usersListLoadSuccess: (state, action: PayloadAction<types.UsersListLoadSuccessPayloadType>) => {\n      switch (state.status.usersListLoad) {\n        case (types.LOADING):\n          switch (state.status.userLoad) {\n            case (types.IDLE):\n            case (types.SUCCESS):\n            case (types.FAILURE):\n              switch (state.status.userUpdate) {\n                case (types.IDLE):\n                case (types.SUCCESS):\n                case (types.FAILURE):\n                  return {\n                    ...state,\n                    status: {\n                      ...state.status,\n                      usersListLoad: types.SUCCESS,\n                    },\n                    usersList: action.payload.list,\n                    errors: {\n                      ...state.errors,\n                      usersListLoad: [],\n                    },\n                  };\n                default: return state;\n              }\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    usersListLoadFailure: (state, action: PayloadAction<types.UsersListLoadFailurePayloadType>) => {\n      switch (state.status.usersListLoad) {\n        case (types.LOADING):\n          switch (state.status.userLoad) {\n            case (types.IDLE):\n            case (types.SUCCESS):\n            case (types.FAILURE):\n              switch (state.status.userUpdate) {\n                case (types.IDLE):\n                case (types.SUCCESS):\n                case (types.FAILURE):\n                  return {\n                    ...state,\n                    status: {\n                      ...state.status,\n                      usersListLoad: types.FAILURE,\n                    },\n                    initialValues: initialState.initialValues,\n                    errors: {\n                      ...state.errors,\n                      usersListLoad: action.payload.errors,\n                    },\n                  };\n                default: return state;\n              }\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    userLoadReq: (state, action: PayloadAction<types.UserLoadReqPayloadType>) => {\n      switch (state.status.usersListLoad) {\n        case (types.SUCCESS):\n          switch (state.status.userLoad) {\n            case (types.IDLE):\n            case (types.SUCCESS):\n            case (types.FAILURE):\n              switch (state.status.userUpdate) {\n                case (types.IDLE):\n                case (types.SUCCESS):\n                case (types.FAILURE):\n                  return {\n                    ...state,\n                    status: {\n                      ...state.status,\n                      userLoad: types.LOADING,\n                    },\n                    errors: {\n                      ...state.errors,\n                      userLoad: [],\n                    },\n                  };\n                default: return state;\n              }\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    userLoadSuccess: (state, action: PayloadAction<types.UserLoadSuccessPayloadType>) => {\n      switch (state.status.usersListLoad) {\n        case (types.SUCCESS):\n          switch (state.status.userLoad) {\n            case (types.LOADING):\n              switch (state.status.userUpdate) {\n                case (types.IDLE):\n                case (types.SUCCESS):\n                case (types.FAILURE):\n                  return {\n                    ...state,\n                    status: {\n                      ...state.status,\n                      userLoad: types.SUCCESS,\n                    },\n                    initialValues: {\n                      ...state.initialValues,\n                      ...action.payload.value,\n                    },\n                    errors: {\n                      ...state.errors,\n                      userLoad: [],\n                    },\n                  };\n                default: return state;\n              }\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    userLoadFailure: (state, action: PayloadAction<types.UserLoadFailurePayloadType>) => {\n      switch (state.status.usersListLoad) {\n        case (types.SUCCESS):\n          switch (state.status.userLoad) {\n            case (types.LOADING):\n              switch (state.status.userUpdate) {\n                case (types.IDLE):\n                case (types.SUCCESS):\n                case (types.FAILURE):\n                  return {\n                    ...state,\n                    status: {\n                      ...state.status,\n                      userLoad: types.FAILURE,\n                    },\n                    initialValues: initialState.initialValues,\n                    errors: {\n                      ...state.errors,\n                      userLoad: action.payload.errors,\n                    },\n                  };\n                default: return state;\n              }\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    userUnload: (state) => ({\n      ...state,\n      status: {\n        ...state.status,\n        userLoad: types.IDLE,\n      },\n      initialValues: initialState.initialValues,\n      errors: {\n        ...state.errors,\n        userLoad: [],\n      },\n    }),\n    userUpdateReq: (state, action: PayloadAction<types.UserUpdateReqPayloadType>) => {\n      switch (state.status.usersListLoad) {\n        case (types.SUCCESS):\n          switch (state.status.userLoad) {\n            case (types.IDLE): // for add new user\n            case (types.SUCCESS): // for edit user\n              switch (state.status.userUpdate) {\n                case (types.IDLE):\n                case (types.SUCCESS):\n                case (types.FAILURE):\n                  return {\n                    ...state,\n                    status: {\n                      ...state.status,\n                      userUpdate: types.LOADING,\n                    },\n                    errors: {\n                      ...state.errors,\n                      userUpdate: [],\n                    },\n                  };\n                default: return state;\n              }\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    userUpdateSuccess: (state) => {\n      switch (state.status.usersListLoad) {\n        case (types.SUCCESS):\n          switch (state.status.userLoad) {\n            case (types.IDLE): // for add new user\n            case (types.SUCCESS): // for edit user\n              switch (state.status.userUpdate) {\n                case (types.LOADING):\n                  return {\n                    ...state,\n                    status: {\n                      ...state.status,\n                      userLoad: types.IDLE, // let the form to load the latest data again\n                      userUpdate: types.SUCCESS,\n                    },\n                    errors: {\n                      ...state.errors,\n                      userUpdate: [],\n                    },\n                  };\n                default: return state;\n              }\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    userUpdateFailure: (state, action: PayloadAction<types.UserUpdateFailurePayloadType>) => {\n      switch (state.status.usersListLoad) {\n        case (types.SUCCESS):\n          switch (state.status.userLoad) {\n            case (types.IDLE): // for add new user\n            case (types.SUCCESS): // for edit user\n              switch (state.status.userUpdate) {\n                case (types.LOADING):\n                  return {\n                    ...state,\n                    status: {\n                      ...state.status,\n                      userUpdate: types.FAILURE,\n                    },\n                    errors: {\n                      ...state.errors,\n                      userUpdate: action.payload.errors,\n                    },\n                  };\n                default: return state;\n              }\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    userDeleteReq: (state, action: PayloadAction<types.UserDeleteReqPayloadType>) => {\n      switch (state.status.usersListLoad) {\n        case (types.SUCCESS):\n          switch (state.status.userLoad) {\n            case (types.IDLE):\n            case (types.SUCCESS):\n              switch (state.status.userUpdate) {\n                case (types.IDLE):\n                case (types.SUCCESS):\n                case (types.FAILURE):\n                  return {\n                    ...state,\n                    status: {\n                      ...state.status,\n                      userUpdate: types.LOADING,\n                    },\n                    errors: {\n                      ...state.errors,\n                      userUpdate: [],\n                    },\n                  };\n                default: return state;\n              }\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    adminFailureReset: (state) => ({\n      ...state,\n      status: {\n        usersListLoad: state.status.usersListLoad === types.FAILURE ? types.IDLE : state.status.usersListLoad,\n        userLoad: state.status.userLoad === types.FAILURE ? types.IDLE : state.status.userLoad,\n        userUpdate: state.status.userUpdate === types.FAILURE ? types.IDLE : state.status.userUpdate,\n      },\n      errors: {\n        usersListLoad: [],\n        userLoad: [],\n        userUpdate: [],\n      },\n    }),\n    adminUnload: () => initialState,\n  },\n});\n\nexport const { actions, reducer } = adminSlice;\nexport const {\n  usersListLoadReq,\n  usersListLoadSuccess,\n  usersListLoadFailure,\n  userLoadReq,\n  userLoadSuccess,\n  userLoadFailure,\n  userUnload,\n  userUpdateReq,\n  userUpdateSuccess,\n  userUpdateFailure,\n  userDeleteReq,\n  adminFailureReset,\n  adminUnload,\n} = actions;\nexport default adminSlice;\n","import { UsersType } from '../login/types';\n\n// Admin Errors\nexport type AdminErrorType = string;\n\n// Status Keywords\nexport const IDLE = 'idle';\nexport const LOADING = 'loading';\nexport const SUCCESS = 'success';\nexport const FAILURE = 'failure';\n\ntype StatusType = typeof IDLE | typeof LOADING | typeof SUCCESS | typeof FAILURE;\n\n// UserInfoType Type\nexport type UserInfoType = Omit<UsersType, 'password'>;\n\n// BriefUserInfo Type\nexport type BriefUserInfo = Pick<UsersType, 'username' | 'group' | 'id' | 'email'>;\n\nexport interface FormType extends UserInfoType {\n  password: string;\n  password2: string;\n}\n\n// Admin State Interface\nexport interface AdminStateType {\n  status: {\n    usersListLoad: StatusType;\n    userLoad: StatusType;\n    userUpdate: StatusType;\n  }\n  usersList: BriefUserInfo[];\n  initialValues: FormType;\n  errors: {\n    usersListLoad: AdminErrorType[];\n    userLoad: AdminErrorType[];\n    userUpdate: AdminErrorType[];\n  }\n}\n\nexport interface UsersListLoadSuccessPayloadType {\n  list: BriefUserInfo[];\n}\n\nexport interface UsersListLoadFailurePayloadType {\n  errors: AdminErrorType[];\n}\n\nexport interface UserLoadReqPayloadType {\n  id: string;\n}\n\nexport interface UserLoadSuccessPayloadType {\n  value: UserInfoType;\n}\n\nexport interface UserLoadFailurePayloadType {\n  errors: AdminErrorType[];\n}\n\nexport interface UserUpdateReqPayloadType {\n  form: FormType;\n}\n\nexport interface UserUpdateFailurePayloadType {\n  errors: AdminErrorType[];\n}\n\nexport interface UserDeleteReqPayloadType {\n  id: string;\n}\n\nexport interface UserDeleteFailurePayloadType {\n  errors: AdminErrorType[];\n}\n\nexport interface UserCreateReqPayloadType {\n  form: FormType;\n}\n\nexport interface UserCreateFailurePayloadType {\n  errors: AdminErrorType[];\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport * as types from '../types';\n\nconst initialState: types.ChatStateType = {\n  status: {\n    connection: types.IDLE,\n    sendMessage: types.IDLE,\n  },\n  socket: null,\n  chats: [],\n  errors: {\n    connection: [],\n    sendMessage: [],\n  },\n};\n\nconst loginSlice = createSlice({\n  name: '@@chat',\n  initialState,\n  reducers: {\n    connectionReq: (state) => {\n      switch (state.status.connection) {\n        case (types.IDLE):\n          return {\n            ...state,\n            status: {\n              ...state.status,\n              connection: types.LOADING,\n            },\n            errors: initialState.errors,\n          };\n        default: return state;\n      }\n    },\n    connectionSuccess: (state, action: PayloadAction<types.ConnectSuccessPayloadType>) => {\n      switch (state.status.connection) {\n        case (types.LOADING):\n          return {\n            ...state,\n            status: {\n              ...state.status,\n              connection: types.SUCCESS,\n            },\n            socket: action.payload.socket,\n          };\n        default: return state;\n      }\n    },\n    connectionFailure: (state, action: PayloadAction<types.ConnectFailurePayloadType>) => {\n      switch (state.status.connection) {\n        case (types.LOADING):\n          return {\n            ...state,\n            status: {\n              ...state.status,\n              connection: types.FAILURE,\n            },\n            socket: null,\n            errors: {\n              ...state.errors,\n              connection: action.payload.errors,\n            },\n          };\n        default: return state;\n      }\n    },\n    connectionDisconnected: (state) => {\n      switch (state.status.connection) {\n        case (types.SUCCESS):\n          return {\n            ...state,\n            status: {\n              ...state.status,\n              connection: types.IDLE,\n            },\n            socket: null,\n            errors: {\n              ...state.errors,\n              connection: [],\n            },\n          };\n        default: return state;\n      }\n    },\n    newIncomeMessage: (state, action: PayloadAction<types.NewIncomeMessagePayloadType>) => {\n      switch (state.status.connection) {\n        case (types.SUCCESS):\n          return {\n            ...state,\n            chats: [action.payload.message, ...state.chats],\n          };\n        default: return state;\n      }\n    },\n    sendMessageReq: (state, action: PayloadAction<types.SendMessagePayloadType>) => {\n      switch (state.status.connection) {\n        case (types.SUCCESS):\n          switch (state.status.sendMessage) {\n            case (types.IDLE):\n            case (types.SUCCESS):\n            case (types.FAILURE):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  sendMessage: types.LOADING,\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    sendMessageSuccess: (state) => {\n      switch (state.status.connection) {\n        case (types.SUCCESS):\n          switch (state.status.sendMessage) {\n            case (types.LOADING):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  sendMessage: types.SUCCESS,\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n    sendMessageFailure: (state, action: PayloadAction<types.SendMessageFailureType>) => {\n      switch (state.status.connection) {\n        case (types.SUCCESS):\n          switch (state.status.sendMessage) {\n            case (types.LOADING):\n              return {\n                ...state,\n                status: {\n                  ...state.status,\n                  sendMessage: types.FAILURE,\n                },\n                errors: {\n                  ...state.errors,\n                  sendMessage: action.payload.errors,\n                },\n              };\n            default: return state;\n          }\n        default: return state;\n      }\n    },\n  },\n});\n\nexport const { actions, reducer } = loginSlice;\nexport const {\n  connectionReq,\n  connectionSuccess,\n  connectionFailure,\n  connectionDisconnected,\n  newIncomeMessage,\n  sendMessageReq,\n  sendMessageSuccess,\n  sendMessageFailure,\n} = actions;\nexport default loginSlice;\n","import { Socket } from 'socket.io-client';\n\n// Chat Error Errors\nexport type ChatErrorType = string;\n\n// Status Keywords\nexport const IDLE = 'idle';\nexport const LOADING = 'loading';\nexport const SUCCESS = 'success';\nexport const FAILURE = 'failure';\n\n// Additional Keywords for socketio\nexport const MESSAGE = 'message';\nexport const DISCONNECTED = 'disconnected';\n\ntype StatusType = typeof IDLE | typeof LOADING | typeof SUCCESS | typeof FAILURE;\n\n\nexport interface messageType {\n  username: string;\n  value: string;\n  time: string;\n}\n\n// Login State Interface\nexport interface ChatStateType {\n  status: {\n    connection: StatusType;\n    sendMessage: StatusType;\n  }\n  socket: typeof Socket | null;\n  chats: messageType[];\n  errors: {\n    connection: ChatErrorType[];\n    sendMessage: ChatErrorType[];\n  }\n}\n\nexport interface ConnectSuccessPayloadType {\n  socket: typeof Socket;\n}\n\nexport interface ConnectFailurePayloadType {\n  errors: ChatErrorType[];\n}\n\nexport interface NewIncomeMessagePayloadType {\n  message: messageType;\n}\n\nexport interface SendMessagePayloadType {\n  value: string;\n}\n\nexport interface SendMessageFailureType {\n  errors: ChatErrorType[];\n}\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport history from './history';\n\nimport { reducer as loginReducer } from '../../features/login/redux/slice';\nimport { reducer as logoutReducer } from '../../features/logout/redux/slice';\nimport { reducer as settingsReducer } from '../../features/settings/redux/slice';\nimport { reducer as adminReducer } from '../../features/admin/redux/slice';\nimport { reducer as chatReducer } from '../../features/chat/redux/slice';\n\nconst rootReducer = combineReducers({\n  router: connectRouter(history),\n  login: loginReducer,\n  logout: logoutReducer,\n  settings: settingsReducer,\n  admin: adminReducer,\n  chat: chatReducer,\n});\n\n// export the type of state\nexport type AppState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","import { ofType, Epic } from 'redux-observable';\nimport { mergeMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { push } from 'connected-react-router';\nimport Cookies from 'universal-cookie';\n\nimport {\n  loginReq, loginSuccess, loginFailure, recoverLoginReq, recoverLoginSuccess, recoverLoginFailure,\n} from './slice';\nimport { LoginReqPayloadType, SUCCESS } from '../types';\n// import { loginApi } from '../api.mock';\nimport { loginApi } from '../api';\n\n\nexport const loginEpic: Epic = (action$) => action$.pipe(\n  ofType(loginReq),\n  mergeMap((action: PayloadAction<LoginReqPayloadType>) => loginApi(action.payload).pipe(\n    mergeMap((rtn) => {\n      if (rtn.result === SUCCESS) {\n        if (action.payload.keepLogin) {\n          const cookie = new Cookies();\n          const { username, group, token } = rtn.payload;\n          cookie.set('username', username);\n          cookie.set('group', group);\n          cookie.set('token', token);\n        }\n        return of(loginSuccess(rtn.payload), push('/'));\n      }\n      return of(loginFailure(rtn.payload));\n    }),\n  )),\n);\n\nexport const recoverLoginEpic: Epic = (action$) => action$.pipe(\n  ofType(recoverLoginReq),\n  mergeMap(() => {\n    const cookie = new Cookies();\n    const { username, token, group } = cookie.getAll();\n    if (username !== '' && username !== undefined\n        && token !== '' && token !== undefined\n       && group !== '' && group !== undefined) {\n      return of(recoverLoginSuccess({ username, token, group }));\n    }\n\n    return of(recoverLoginFailure());\n  }),\n);\n","import { Observable, of } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { map, catchError } from 'rxjs/operators';\n\nimport {\n  GroupType,\n  SUCCESS,\n  FAILURE,\n  LoginSuccessPayloadType,\n  LoginFailPayloadType,\n  LoginErrorType,\n} from './types';\n\ninterface LoginSuccessType {\n  result: typeof SUCCESS;\n  payload: LoginSuccessPayloadType;\n}\n\ninterface LoginFailType {\n  result: typeof FAILURE;\n  payload: LoginFailPayloadType;\n}\n\ntype LoginResultType = LoginSuccessType | LoginFailType;\n\ninterface LoginApiPayloadType {\n  email: string;\n  password: string;\n}\n\nexport const loginApi = ({ email, password }: LoginApiPayloadType): Observable<LoginResultType> => ajax({\n  url: '/api/login',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'rxjs-custom-header': 'Rxjs',\n  },\n  body: {\n    email,\n    password,\n  },\n}).pipe(\n  map((res) => {\n    const { token, username, group }: { token: string, username: string, group: GroupType } = res.response.payload;\n    return {\n      result: SUCCESS as typeof SUCCESS,\n      payload: {\n        username,\n        token,\n        group,\n      },\n    };\n  }),\n  catchError((res) => {\n    let error: LoginErrorType = '';\n    if (res !== null && res !== undefined && 'response' in res\n        && res.response !== null && res.response !== undefined && 'payload' in res.response) {\n      error = res.response.payload.error;\n    } else {\n      error = 'network error';\n    }\n    console.log('login ajax error: ', res); // eslint-disable-line no-console\n    return of({\n      result: FAILURE as typeof FAILURE,\n      payload: {\n        errors: [error],\n      },\n    });\n  }),\n);\n","import { ofType, Epic } from 'redux-observable';\nimport { mergeMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { push } from 'connected-react-router';\nimport Cookies from 'universal-cookie';\n\nimport { logoutReq, logoutSuccess } from './slice';\nimport { logoutApi } from '../api.mock';\n\nexport const logoutEpic: Epic = (action$) => action$.pipe(\n  ofType(logoutReq),\n  mergeMap(() => logoutApi().pipe(\n    mergeMap(() => {\n      const cookie = new Cookies();\n      cookie.remove('username');\n      cookie.remove('group');\n      cookie.remove('token');\n      return of(logoutSuccess(), push('/logout/success'));\n    }),\n  )),\n);\n\n","import { Observable, of } from 'rxjs';\n\nimport { SUCCESS } from './types';\n\ninterface LogoutSuccessType {\n  result: typeof SUCCESS;\n}\n\ntype LogoutResultType = LogoutSuccessType;\n\nexport const logoutApi = (): Observable<LogoutResultType> => of({\n  result: SUCCESS,\n});\n","import { ofType, Epic, StateObservable } from 'redux-observable';\nimport { mergeMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AppState } from '../../../app/redux/root-reducer';\nimport {\n  settingsLoadReq, settingsLoadSuccess, settingsLoadFailure, settingsUpdateReq, settingsUpdateSuccess, settingsUpdateFailure,\n} from './slice';\nimport { settingsLoadApi, settingsUpdateApi } from '../api';\nimport { SUCCESS, SettingsUpdateReqPayloadType } from '../types';\n\nexport const settingsLoadEpic: Epic = (actions$, state$: StateObservable<AppState>) => actions$.pipe(\n  ofType(settingsLoadReq),\n  mergeMap(() => settingsLoadApi({ token: state$.value.login.token }).pipe(\n    mergeMap((rtn) => {\n      if (rtn.result === SUCCESS) {\n        return of(settingsLoadSuccess(rtn.payload));\n      }\n      return of(settingsLoadFailure(rtn.payload));\n    }),\n  )),\n);\n\nexport const settingsUpdateEpic: Epic = (action$, state$: StateObservable<AppState>) => action$.pipe(\n  ofType(settingsUpdateReq),\n  mergeMap((action: PayloadAction<SettingsUpdateReqPayloadType>) => settingsUpdateApi({\n    token: state$.value.login.token, form: action.payload.form,\n  }).pipe(\n    mergeMap((rtn) => {\n      if (rtn.result === SUCCESS) {\n        return of(settingsUpdateSuccess());\n      }\n      return of(settingsUpdateFailure(rtn.payload));\n    }),\n  )),\n);\n","import { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ajax } from 'rxjs/ajax';\n\nimport {\n  SUCCESS,\n  FAILURE,\n  FormType,\n  SettingsLoadSuccessPayloadType,\n  SettingsLoadFailurePayloadType,\n  SettingsUpdateFailurePayloadType,\n  UserInfoType,\n} from './types';\n\ninterface SettingsLoadSuccessType {\n  result: typeof SUCCESS;\n  payload: SettingsLoadSuccessPayloadType;\n}\n\ninterface SettingsLoadFailureType {\n  result: typeof FAILURE;\n  payload: SettingsLoadFailurePayloadType;\n}\n\ntype SettingsLoadResultType = SettingsLoadSuccessType | SettingsLoadFailureType;\n\nexport const settingsLoadApi = ({ token }: { token: string }): Observable<SettingsLoadResultType> => ajax({\n  url: '/api/user',\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `JWT ${token}`,\n    'rxjs-custom-header': 'Rxjs',\n  },\n}).pipe(\n  map((res) => {\n    const {\n      id, email, group, username, phone,\n    }: UserInfoType = res.response.payload.user;\n\n    return {\n      result: SUCCESS as typeof SUCCESS,\n      payload: {\n        values: {\n          id, email, group, username, phone,\n        },\n      },\n    };\n  }),\n  catchError((res) => {\n    let error: string = '';\n    if (res !== null && res !== undefined && 'response' in res\n        && res.response !== null && res.response !== undefined && 'payload' in res.response) {\n      error = res.response.payload.error;\n    } else {\n      error = 'network error';\n    }\n    console.log('settings load ajax error: ', res); // eslint-disable-line no-console\n    return of({\n      result: FAILURE as typeof FAILURE,\n      payload: {\n        errors: [error],\n      },\n    });\n  }),\n);\n\ninterface SettingsUpdateSuccessType {\n  result: typeof SUCCESS;\n}\n\ninterface SettingsUpdateFailureType {\n  result: typeof FAILURE;\n  payload: SettingsUpdateFailurePayloadType;\n}\n\ntype SettingsUpdateResultType = SettingsUpdateSuccessType | SettingsUpdateFailureType;\n\nexport const settingsUpdateApi = ({ token, form }: { token: string, form: FormType}): Observable<SettingsUpdateResultType> => ajax({\n  url: '/api/user',\n  method: 'PATCH',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `JWT ${token}`,\n    'rxjs-custom-header': 'Rxjs',\n  },\n  body: {\n    form,\n  },\n}).pipe(\n  map(() => ({\n    result: SUCCESS as typeof SUCCESS,\n  })),\n  catchError((res) => {\n    let error: string = '';\n    if (res !== null && res !== undefined && 'response' in res\n        && res.response !== null && res.response !== undefined && 'payload' in res.response) {\n      error = res.response.payload.error;\n    } else {\n      error = 'network error';\n    }\n    console.log('settings update ajax error: ', res); // eslint-disable-line no-console\n    return of({\n      result: FAILURE as typeof FAILURE,\n      payload: {\n        errors: [error],\n      },\n    });\n  }),\n);\n","import {\n  ofType, Epic, StateObservable,\n} from 'redux-observable';\nimport { mergeMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { AppState } from '../../../app/redux/root-reducer';\nimport {\n  usersListLoadReq,\n  usersListLoadSuccess,\n  usersListLoadFailure,\n  userLoadReq,\n  userLoadSuccess,\n  userLoadFailure,\n  userUpdateReq,\n  userUpdateSuccess,\n  userUpdateFailure,\n  userDeleteReq,\n} from './slice';\nimport {\n  usersListLoadApi, userLoadApi, userUpdateApi, userCreateApi, userDeleteApi,\n} from '../api';\nimport {\n  SUCCESS, UserLoadReqPayloadType, UserUpdateReqPayloadType, UserDeleteReqPayloadType,\n} from '../types';\n\nexport const usersListLoadEpic: Epic = (action$, state$: StateObservable<AppState>) => action$.pipe(\n  ofType(usersListLoadReq),\n  mergeMap(() => usersListLoadApi({ token: state$.value.login.token }).pipe(\n    mergeMap((rtn) => {\n      if (rtn.result === SUCCESS) {\n        return of(usersListLoadSuccess(rtn.payload));\n      }\n      return of(usersListLoadFailure(rtn.payload));\n    }),\n  )),\n);\n\nexport const userLoadEpic: Epic = (action$, state$: StateObservable<AppState>) => action$.pipe(\n  ofType(userLoadReq),\n  mergeMap((action: PayloadAction<UserLoadReqPayloadType>) => userLoadApi({ token: state$.value.login.token, id: action.payload.id }).pipe(\n    mergeMap((rtn) => {\n      if (rtn.result === SUCCESS) {\n        return of(userLoadSuccess(rtn.payload));\n      }\n      return of(userLoadFailure(rtn.payload));\n    }),\n  )),\n);\n\nexport const userUpdateEpic: Epic = (actions$, state$: StateObservable<AppState>) => actions$.pipe(\n  ofType(userUpdateReq),\n  mergeMap((action: PayloadAction<UserUpdateReqPayloadType>) => (\n    action.payload.form.id !== ''\n      ? userUpdateApi({ token: state$.value.login.token, id: action.payload.form.id, form: action.payload.form })\n      : userCreateApi({ token: state$.value.login.token, form: action.payload.form })\n  ).pipe(\n    mergeMap((rtn) => {\n      if (rtn.result === SUCCESS) {\n        return of(userUpdateSuccess());\n      }\n      return of(userUpdateFailure(rtn.payload));\n    }),\n  )),\n);\n\nexport const userDeleteEpic: Epic = (actions$, state$: StateObservable<AppState>) => actions$.pipe(\n  ofType(userDeleteReq),\n  mergeMap((action: PayloadAction<UserDeleteReqPayloadType>) => userDeleteApi({\n    id: action.payload.id, token: state$.value.login.token,\n  }).pipe(\n    mergeMap((rtn) => {\n      if (rtn.result === SUCCESS) {\n        return of(userUpdateSuccess());\n      }\n      return of(userUpdateFailure(rtn.payload));\n    }),\n  )),\n);\n","import { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ajax } from 'rxjs/ajax';\n\nimport {\n  SUCCESS,\n  FAILURE,\n  FormType,\n  UsersListLoadSuccessPayloadType,\n  UsersListLoadFailurePayloadType,\n  BriefUserInfo,\n  UserInfoType,\n  UserLoadSuccessPayloadType,\n  UserLoadFailurePayloadType,\n  UserUpdateFailurePayloadType,\n  UserCreateFailurePayloadType,\n  UserDeleteFailurePayloadType,\n} from './types';\n\ninterface UsersListLoadSuccessType {\n  result: typeof SUCCESS;\n  payload: UsersListLoadSuccessPayloadType;\n}\n\ninterface UsersListLoadFailureType {\n  result: typeof FAILURE;\n  payload: UsersListLoadFailurePayloadType;\n}\n\nexport type UsersListLoadResultType = UsersListLoadSuccessType | UsersListLoadFailureType;\n\nexport const usersListLoadApi = ({ token }: { token: string }): Observable<UsersListLoadResultType> => ajax({\n  url: '/api/user/list',\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `JWT ${token}`,\n    'rxjs-custom-header': 'Rxjs',\n  },\n}).pipe(\n  map((res) => {\n    const list: BriefUserInfo[] = res.response.payload.users;\n    return {\n      result: SUCCESS as typeof SUCCESS,\n      payload: {\n        list,\n      },\n    };\n  }),\n  catchError((res) => {\n    let error: string = '';\n    if (res !== null && res !== undefined && 'response' in res\n        && res.response !== null && res.response !== undefined && 'payload' in res.response) {\n      error = res.response.payload.error;\n    } else {\n      error = 'network error';\n    }\n    console.log('users list load ajax error: ', res); // eslint-disable-line no-console\n    return of({\n      result: FAILURE as typeof FAILURE,\n      payload: {\n        errors: [error],\n      },\n    });\n  }),\n);\n\ninterface UserLoadSuccessType {\n  result: typeof SUCCESS;\n  payload: UserLoadSuccessPayloadType;\n}\n\ninterface UserLoadFailureType {\n  result: typeof FAILURE;\n  payload: UserLoadFailurePayloadType;\n}\n\nexport type UserLoadResultType = UserLoadSuccessType | UserLoadFailureType;\n\nexport const userLoadApi = ({ token, id: targetId }: { token: string, id: string }): Observable<UserLoadResultType> => ajax({\n  url: `/api/user/by-id/${targetId}`,\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `JWT ${token}`,\n    'rxjs-custom-header': 'Rxjs',\n  },\n}).pipe(\n  map((res) => {\n    const {\n      id: userId, email, group, username, phone,\n    }: UserInfoType = res.response.payload.user;\n\n    return {\n      result: SUCCESS as typeof SUCCESS,\n      payload: {\n        value: {\n          id: userId,\n          email,\n          group,\n          username,\n          phone,\n        },\n      },\n    };\n  }),\n  catchError((res) => {\n    let error: string = '';\n    if (res !== null && res !== undefined && 'response' in res\n        && res.response !== null && res.response !== undefined && 'payload' in res.response) {\n      error = res.response.payload.error;\n    } else {\n      error = 'network error';\n    }\n    console.log('user load ajax error: ', res); // eslint-disable-line no-console\n    return of({\n      result: FAILURE as typeof FAILURE,\n      payload: {\n        errors: [error],\n      },\n    });\n  }),\n);\n\ninterface UserUpdateSuccessType {\n  result: typeof SUCCESS;\n}\n\ninterface UserUpdateFailureType {\n  result: typeof FAILURE;\n  payload: UserUpdateFailurePayloadType;\n}\n\ntype UserUpdateResultType = UserUpdateSuccessType | UserUpdateFailureType;\n\nexport const userUpdateApi = ({\n  id: targetId, token, form,\n}: {\n  id: string, token: string, form: FormType\n}): Observable<UserUpdateResultType> => ajax({\n  url: `/api/user/by-id/${targetId}`,\n  method: 'PATCH',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `JWT ${token}`,\n    'rxjs-custom-header': 'Rxjs',\n  },\n  body: form,\n}).pipe(\n  map(() => ({\n    result: SUCCESS as typeof SUCCESS,\n  })),\n  catchError((res) => {\n    let error: string = '';\n    if (res !== null && res !== undefined && 'response' in res\n        && res.response !== null && res.response !== undefined && 'payload' in res.response) {\n      error = res.response.payload.error;\n    } else {\n      error = 'network error';\n    }\n    console.log('user update ajax error: ', res); // eslint-disable-line no-console\n    return of({\n      result: FAILURE as typeof FAILURE,\n      payload: {\n        errors: [error],\n      },\n    });\n  }),\n);\n\ninterface UserCreateSuccessType {\n  result: typeof SUCCESS;\n}\n\ninterface UserCreateFailureType {\n  result: typeof FAILURE;\n  payload: UserCreateFailurePayloadType;\n}\n\ntype UserCreateResultType = UserCreateSuccessType | UserCreateFailureType;\n\nexport const userCreateApi = ({\n  token, form,\n}: {\n  token: string, form: FormType\n}): Observable<UserCreateResultType> => ajax({\n  url: '/api/user',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `JWT ${token}`,\n    'rxjs-custom-header': 'Rxjs',\n  },\n  body: form,\n}).pipe(\n  map(() => ({\n    result: SUCCESS as typeof SUCCESS,\n  })),\n  catchError((res) => {\n    let error: string = '';\n    if (res !== null && res !== undefined && 'response' in res\n        && res.response !== null && res.response !== undefined && 'payload' in res.response) {\n      error = res.response.payload.error;\n    } else {\n      error = 'network error';\n    }\n    console.log('user update ajax error: ', res); // eslint-disable-line no-console\n    return of({\n      result: FAILURE as typeof FAILURE,\n      payload: {\n        errors: [error],\n      },\n    });\n  }),\n);\n\ninterface UserDeleteSuccessType {\n  result: typeof SUCCESS;\n}\n\ninterface UserDeleteFailureType {\n  result: typeof FAILURE;\n  payload: UserDeleteFailurePayloadType;\n}\n\ntype UserDeleteResultType = UserDeleteSuccessType | UserDeleteFailureType;\n\nexport const userDeleteApi = ({ token, id }: { token: string, id: string }): Observable<UserDeleteResultType> => ajax({\n  url: `/api/user/by-id/${id}`,\n  method: 'DELETE',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `JWT ${token}`,\n    'rxjs-custom-header': 'Rxjs',\n  },\n}).pipe(\n  map(() => ({\n    result: SUCCESS as typeof SUCCESS,\n  })),\n  catchError((res) => {\n    let error: string = '';\n    if (res !== null && res !== undefined && 'response' in res\n        && res.response !== null && res.response !== undefined && 'payload' in res.response) {\n      error = res.response.payload.error;\n    } else {\n      error = 'network error';\n    }\n    console.log('user update ajax error: ', res); // eslint-disable-line no-console\n    return of({\n      result: FAILURE as typeof FAILURE,\n      payload: {\n        errors: [error],\n      },\n    });\n  }),\n);\n","import { ofType, Epic, StateObservable } from 'redux-observable';\nimport { mergeMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { connectionApi, sendMessageApi } from '../api';\nimport {\n  connectionReq, newIncomeMessage, connectionSuccess, connectionDisconnected, sendMessageReq, sendMessageSuccess, sendMessageFailure,\n} from './slice';\nimport {\n  MESSAGE, SUCCESS, DISCONNECTED, SendMessagePayloadType,\n} from '../types';\nimport { AppState } from '../../../app/redux/root-reducer';\n\n\nexport const connectionEpic: Epic = (action$) => action$.pipe(\n  ofType(connectionReq),\n  mergeMap(() => connectionApi().pipe(\n    mergeMap((result) => {\n      switch (result.result) {\n        case (MESSAGE):\n          return of(newIncomeMessage({ message: result.payload.message }));\n        case (SUCCESS):\n          return of(connectionSuccess({ socket: result.payload.socket }));\n        case (DISCONNECTED):\n          return of(connectionDisconnected());\n        default: return of();\n      }\n    }),\n  )),\n);\n\nexport const sendmessageEpic: Epic = (action$, state$: StateObservable<AppState>) => action$.pipe(\n  ofType(sendMessageReq),\n  mergeMap((action: PayloadAction<SendMessagePayloadType>) => {\n    const { socket } = state$.value.chat;\n    const { username } = state$.value.login;\n    const { value } = action.payload;\n\n    if (socket === null) return of();\n    return sendMessageApi({ socket, value, username }).pipe(\n      mergeMap((result) => {\n        if (result.result === SUCCESS) {\n          return of(sendMessageSuccess());\n        }\n        return of(sendMessageFailure(result.payload));\n      }),\n    );\n  }),\n);\n","import {\n  Observable, fromEvent, merge, of,\n} from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport socketio, { Socket } from 'socket.io-client';\n\nimport {\n  MESSAGE, DISCONNECTED, SUCCESS, FAILURE, NewIncomeMessagePayloadType,\n} from './types';\n\nconst endpoint = '/socketio/chat';\n\ninterface IncomeMessageType {\n  result: typeof MESSAGE;\n  payload: NewIncomeMessagePayloadType;\n}\n\ninterface ConnectionSuccessType {\n  result: typeof SUCCESS;\n  payload: {\n    socket: typeof Socket;\n  }\n}\n\ninterface ConnectionFailureType {\n  result: typeof FAILURE;\n  payload: {\n    errors: string[];\n  }\n}\n\ninterface DisconnectionType {\n  result: typeof DISCONNECTED;\n}\n\ntype ConnectionResultType = IncomeMessageType | ConnectionSuccessType | ConnectionFailureType | DisconnectionType;\n\nexport const connectionApi = (): Observable<ConnectionResultType> => {\n  const socket = socketio(endpoint);\n  return merge(\n    fromEvent<{ time: string, message: string, username: string }>(socket, 'chatMessage').pipe(\n      map(({ time, message, username }) => ({\n        result: MESSAGE as typeof MESSAGE,\n        payload: {\n          message: {\n            username,\n            value: message,\n            time,\n          },\n        },\n      })),\n    ),\n    fromEvent(socket, 'connect').pipe(\n      map(() => ({\n        result: SUCCESS as typeof SUCCESS,\n        payload: {\n          socket,\n        },\n      })),\n    ),\n    fromEvent(socket, 'disconnect').pipe(\n      map(() => ({\n        result: DISCONNECTED as typeof DISCONNECTED,\n      })),\n    ),\n  );\n};\n\ninterface SendMessageSuccessType {\n  result: typeof SUCCESS;\n}\n\ninterface SendMessageFailureType {\n  result: typeof FAILURE;\n  payload: {\n    errors: string[];\n  }\n}\n\nexport type SendMessageResultType = SendMessageSuccessType | SendMessageFailureType;\n\nexport const sendMessageApi = ({ socket, value, username }: { socket: typeof Socket, value: string, username: string }): Observable<SendMessageResultType> => {\n  if (socket.connected) {\n    socket.emit('chatMessage', {\n      message: value,\n      username,\n    });\n\n    return of({\n      result: SUCCESS as typeof SUCCESS,\n    });\n  }\n\n  return of({\n    result: FAILURE as typeof FAILURE,\n    payload: {\n      errors: ['socket disconnected'],\n    },\n  });\n};\n","import { combineEpics } from 'redux-observable';\n\nimport * as loginEpics from '../../features/login/redux/epics';\nimport * as logoutEpics from '../../features/logout/redux/epics';\nimport * as settingsEpic from '../../features/settings/redux/epics';\nimport * as adminEpic from '../../features/admin/redux/epics';\nimport * as chatEpic from '../../features/chat/redux/epics';\n\nconst rootEpic = combineEpics(\n  ...Object.values(loginEpics),\n  ...Object.values(logoutEpics),\n  ...Object.values(settingsEpic),\n  ...Object.values(adminEpic),\n  ...Object.values(chatEpic),\n);\n\nexport default rootEpic;\n","import { routerMiddleware } from 'connected-react-router';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport rootReducer from './root-reducer';\nimport rootEpic from './root-epic';\nimport history from './history';\n\n// create epic middleware\nconst epicMiddleware = createEpicMiddleware();\n\n// use redux devtool plugin on development\nconst composeEnhancers = (process.env.NODE_ENV === 'development' && window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n// compose enhancers\nconst enhancer = composeEnhancers(applyMiddleware(epicMiddleware, routerMiddleware(history)));\n\n// rehydrating state on start\nconst initialState = {};\n\n// store creation\nconst store = createStore(rootReducer, initialState, enhancer);\n\nepicMiddleware.run(rootEpic);\n\nexport default store;\n\n// export the type of dispatch\nexport type AppDispatch = typeof store.dispatch;\n\nexport { default as rootAction } from './root-action';\n","import {\n  GroupType, ADMIN, USER, LOGGEDOUT,\n} from '../login/types';\n\nexport const right = 'right';\nexport const left = 'left';\n\ninterface SubtabType {\n  name: string;\n  id: string;\n  address: string;\n}\n\ninterface DropdownMenuType {\n  name: string;\n  id: string;\n  groups: GroupType[];\n  float: typeof right | typeof left;\n  subtab: SubtabType[]\n}\n\ninterface TabType {\n  name: string;\n  id: string;\n  address: string;\n  groups: GroupType[];\n  float: typeof right | typeof left;\n}\n\nexport type NavListType = (DropdownMenuType | TabType)[];\n\nconst NavList: NavListType = [\n  {\n    name: 'Login',\n    id: 'login',\n    address: '/login',\n    groups: [LOGGEDOUT],\n    float: right,\n  },\n  {\n    name: 'Chatroom',\n    id: 'chat',\n    address: '/chat',\n    groups: [ADMIN, USER],\n    float: left,\n  },\n  {\n    name: 'Settings',\n    id: 'settings',\n    address: '/settings',\n    groups: [ADMIN, USER],\n    float: right,\n  },\n  {\n    name: 'Admin',\n    id: 'admin',\n    address: '/admin',\n    groups: [ADMIN],\n    float: right,\n  },\n  {\n    name: 'Logout',\n    id: 'logout',\n    address: '/logout',\n    groups: [ADMIN, USER],\n    float: right,\n  },\n];\n\nexport default NavList;\n","import React from 'react';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useSelector } from 'react-redux';\n\nimport { AppState } from '../../app/redux/root-reducer';\nimport NavList, { left, right, NavListType } from './NavList';\n\nimport './index.css';\n\nconst NavItems: React.FC<{ navList: NavListType }> = ({ navList }) => (\n  <>\n    {navList\n      .map((item) => (\n        'address' in item\n          ? (\n            <LinkContainer to={item.address} key={item.id}>\n              <Nav.Link>{item.name}</Nav.Link>\n            </LinkContainer>\n          )\n          : (\n            <NavDropdown title={item.name} id={`${item.id}-nav-dropdown`} key={item.id}>\n              {item.subtab.map((subitem) => (\n                <LinkContainer to={subitem.address} key={subitem.id}>\n                  <NavDropdown.Item>{subitem.name}</NavDropdown.Item>\n                </LinkContainer>\n              ))}\n            </NavDropdown>\n          )\n      ))}\n  </>\n);\n\nconst NavBar: React.FC = () => {\n  const group = useSelector((state: AppState) => state.login.group);\n\n  const currentNavList = NavList\n    .filter((item) => item.groups.includes(group));\n\n  const brand = 'Grocery';\n\n  return (\n    <Navbar variant=\"dark\" collapseOnSelect expand=\"sm\">\n      <LinkContainer to=\"/\">\n        <Navbar.Brand href=\"/\">{brand}</Navbar.Brand>\n      </LinkContainer>\n      <Navbar.Toggle aria-controls=\"main-navbar-nav\" />\n      <Navbar.Collapse id=\"main-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <NavItems navList={currentNavList.filter((item) => item.float === left)} />\n        </Nav>\n        <Nav>\n          <NavItems navList={currentNavList.filter((item) => item.float === right)} />\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import React, { useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { useRouteMatch } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Container, Form, Alert, Col, Button,\n} from 'react-bootstrap';\nimport { useFormik } from 'formik';\n\nimport { FAILURE } from './types';\nimport { loginReq, loginFailureReset } from './redux/slice';\nimport { AppState } from '../../app/redux/root-reducer';\n\nimport './FormPage.css';\n\nconst loginSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Please input a valid email')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required'),\n  keepLogin: Yup.boolean()\n    .notRequired(),\n});\n\ninterface FormType {\n  email: string;\n  password: string;\n  keepLogin: boolean;\n}\n\nconst initialValues: FormType = {\n  email: '',\n  password: '',\n  keepLogin: false,\n};\n\nconst LoginForm: React.FC = () => {\n  const match = useRouteMatch();\n  const dispatch = useDispatch();\n\n  const status = useSelector((state: AppState) => state.login.status);\n\n  const handleLogin = (values: FormType) => {\n    dispatch(loginReq(values));\n  };\n\n  const formik = useFormik({\n    initialValues,\n    onSubmit: handleLogin,\n    validationSchema: loginSchema,\n  });\n\n  useEffect(() => () => {\n    dispatch(loginFailureReset());\n  }, [match.url, dispatch]);\n\n  return (\n    <Container>\n      <Form className=\"form-custom\" onSubmit={formik.handleSubmit}>\n        <h1 className=\"form-message\">\n          Login\n        </h1>\n        {status.login === FAILURE && (\n          <Alert variant=\"danger\">\n            Login failed, please try again.\n          </Alert>\n        )}\n        <Form.Row>\n          <Form.Group as={Col} md=\"12\">\n            <Form.Label>Email:</Form.Label>\n            <Form.Control\n              name=\"email\"\n              value={formik.values.email}\n              type=\"input\"\n              isInvalid={!!formik.touched.email && !!formik.errors.email}\n              onChange={formik.handleChange}\n              placeholder=\"Email\"\n              disabled={false}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formik.errors.email}\n            </Form.Control.Feedback>\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} md=\"12\">\n            <Form.Label>Password:</Form.Label>\n            <Form.Control\n              name=\"password\"\n              value={formik.values.password}\n              type=\"password\"\n              isInvalid={!!formik.touched.password && !!formik.errors.password}\n              onChange={formik.handleChange}\n              placeholder=\"Password\"\n              disabled={false}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {formik.errors.email}\n            </Form.Control.Feedback>\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Col>\n            <Form.Check\n              type=\"checkbox\"\n              name=\"keepLogin\"\n              checked={formik.values.keepLogin}\n              onChange={formik.handleChange}\n              label=\"Keep Login\"\n            />\n          </Col>\n        </Form.Row>\n        <Form.Row>\n          <Col>\n            <Button\n              value=\"primary\"\n              type=\"submit\"\n            >\n              Login\n            </Button>\n          </Col>\n        </Form.Row>\n      </Form>\n    </Container>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nconst LoginPromptPage = () => (\n  <Container>\n    <div>Please Login.</div>\n  </Container>\n);\n\nexport default LoginPromptPage;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\n\nimport LoginForm from './FormPage';\nimport LoginPrompt from './PromptPage';\n\n\nconst Login: React.FC = () => (\n  <Switch>\n    <Route path=\"/login\">\n      <LoginForm />\n    </Route>\n    <Route path=\"/login/prompt\">\n      <LoginPrompt />\n    </Route>\n  </Switch>\n);\n\nexport default Login;\n","import React, { FormEvent } from 'react';\nimport { Container, Jumbotron, Button } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppState } from '../../app/redux/root-reducer';\nimport { logoutReq } from './redux/slice';\n\nimport './FormPage.css';\n\nconst LogoutForm: React.FC = () => {\n  const username = useSelector((state: AppState) => state.login.username);\n  const dispatch = useDispatch();\n\n  const handleLogout = (e: FormEvent) => {\n    e.preventDefault();\n    dispatch(logoutReq());\n  };\n\n  return (\n    <Container>\n      <Jumbotron className=\"logout-prompt\">\n        <h1>\n          {`${username}, are you sure to logout?`}\n        </h1>\n        <form onSubmit={handleLogout}>\n          <Button type=\"submit\">Logout</Button>\n        </form>\n      </Jumbotron>\n    </Container>\n  );\n};\n\nexport default LogoutForm;\n","import { useEffect, useState } from 'react';\n\ninterface UseTimeoutProps {\n  timeout: number;\n  handleTimeout: () => void;\n}\n\nconst useTimeout = ({ timeout, handleTimeout }: UseTimeoutProps) => {\n  const [time, setTime] = useState(timeout);\n  useEffect(() => {\n    const id = setTimeout(() => {\n      if (time > 1) {\n        setTime(time - 1);\n      } else {\n        handleTimeout();\n      }\n    }, 1000);\n\n    return () => {\n      clearTimeout(id);\n    };\n  }, [time, setTime, handleTimeout]);\n  return time;\n};\n\nexport default useTimeout;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Container, Jumbotron } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { push } from 'connected-react-router';\nimport useTimeout from '../../common/useTimeout';\n\nimport './SuccessPage.css';\n\nconst SuccessPage: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const url = '/';\n\n  const handleRedirect = () => {\n    dispatch(push(url));\n  };\n\n  const time = useTimeout({ timeout: 5, handleTimeout: handleRedirect });\n\n\n  return (\n    <Container>\n      <Jumbotron className=\"justify-content-center logout-success-prompt\">\n        <h1 className=\"justify-content-center\">Logout Success</h1>\n        <p>You have successfully Logout.</p>\n        <p>\n          {`You will be redirect in ${time} seconds or click `}\n          <Link to={url}>here</Link>\n          {' to the home page'}\n        </p>\n      </Jumbotron>\n    </Container>\n  );\n};\n\nexport default SuccessPage;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\n\nimport LogoutForm from './FormPage';\nimport LogoutSuccess from './SuccessPage';\n\n\nconst Login = () => (\n  <Switch>\n    <Route path=\"/logout/success\">\n      <LogoutSuccess />\n    </Route>\n    <Route path=\"/logout\">\n      <LogoutForm />\n    </Route>\n  </Switch>\n);\n\nexport default Login;\n","import React, { useEffect } from 'react';\nimport { Container, Button } from 'react-bootstrap';\n\nimport './ChatroomPage.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppState } from '../../app/redux/root-reducer';\nimport { connectionReq, sendMessageReq } from './redux/slice';\nimport { FAILURE, IDLE } from './types';\n\nconst ChatroomPage = () => {\n  const chats = useSelector((state: AppState) => state.chat.chats);\n  const status = useSelector((state:AppState) => state.chat.status);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (status.connection === IDLE || status.connection === FAILURE) dispatch(connectionReq());\n  }, [dispatch, status.connection]);\n\n  const handleSend = () => {\n    dispatch(sendMessageReq({ value: '123' }));\n  };\n  return (\n\n    <Container>\n      <h1>Messaging</h1>\n      <div className=\"messaging\">\n        <div className=\"inbox_msg\">\n          <div className=\"inbox_people\">\n            <div className=\"headind_srch\">\n              <div className=\"recent_heading\">\n                <h4>Recent</h4>\n              </div>\n              <div className=\"srch_bar\">\n                <div className=\"stylish-input-group\">\n                  <input type=\"text\" className=\"search-bar\" placeholder=\"Search\" />\n                  <span className=\"input-group-addon\">\n                    <button type=\"button\">\n                      <i className=\"fa fa-search\" aria-hidden=\"true\" />\n                    </button>\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div className=\"inbox_chat\">\n              <div className=\"chat_list active_chat\">\n                <div className=\"chat_people\">\n                  <div className=\"chat_img\">\n                    {' '}\n                    <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" />\n                    {' '}\n                  </div>\n                  <div className=\"chat_ib\">\n                    <h5>\n                      Sunil Rajput\n                      <span className=\"chat_date\">Dec 25</span>\n                    </h5>\n                    <p>\n                      Test, which is a new approach to have all solutions\n                      astrology under one roof.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"chat_list\">\n                <div className=\"chat_people\">\n                  <div className=\"chat_img\">\n                    {' '}\n                    <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" />\n                    {' '}\n                  </div>\n                  <div className=\"chat_ib\">\n                    <h5>\n                      Sunil Rajput\n                      <span className=\"chat_date\">Dec 25</span>\n                    </h5>\n                    <p>\n                      Test, which is a new approach to have all solutions\n                      astrology under one roof.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"chat_list\">\n                <div className=\"chat_people\">\n                  <div className=\"chat_img\">\n                    {' '}\n                    <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" />\n                    {' '}\n                  </div>\n                  <div className=\"chat_ib\">\n                    <h5>\n                      Sunil Rajput\n                      <span className=\"chat_date\">Dec 25</span>\n                    </h5>\n                    <p>\n                      Test, which is a new approach to have all solutions\n                      astrology under one roof.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"chat_list\">\n                <div className=\"chat_people\">\n                  <div className=\"chat_img\">\n                    {' '}\n                    <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" />\n                    {' '}\n                  </div>\n                  <div className=\"chat_ib\">\n                    <h5>\n                      Sunil Rajput\n                      <span className=\"chat_date\">Dec 25</span>\n                    </h5>\n                    <p>\n                      Test, which is a new approach to have all solutions\n                      astrology under one roof.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"chat_list\">\n                <div className=\"chat_people\">\n                  <div className=\"chat_img\">\n                    {' '}\n                    <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" />\n                    {' '}\n                  </div>\n                  <div className=\"chat_ib\">\n                    <h5>\n                      Sunil Rajput\n                      <span className=\"chat_date\">Dec 25</span>\n                    </h5>\n                    <p>\n                      Test, which is a new approach to have all solutions\n                      astrology under one roof.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"chat_list\">\n                <div className=\"chat_people\">\n                  <div className=\"chat_img\">\n                    {' '}\n                    <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" />\n                    {' '}\n                  </div>\n                  <div className=\"chat_ib\">\n                    <h5>\n                      Sunil Rajput\n                      <span className=\"chat_date\">Dec 25</span>\n                    </h5>\n                    <p>\n                      Test, which is a new approach to have all solutions\n                      astrology under one roof.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"chat_list\">\n                <div className=\"chat_people\">\n                  <div className=\"chat_img\">\n                    {' '}\n                    <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" />\n                    {' '}\n                  </div>\n                  <div className=\"chat_ib\">\n                    <h5>\n                      Sunil Rajput\n                      <span className=\"chat_date\">Dec 25</span>\n                    </h5>\n                    <p>\n                      Test, which is a new approach to have all solutions\n                      astrology under one roof.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"mesgs\">\n            <div className=\"msg_history\">\n              <div className=\"incoming_msg\">\n                <div className=\"incoming_msg_img\">\n                  {' '}\n                  <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" />\n                  {' '}\n                </div>\n                <div className=\"received_msg\">\n                  <div className=\"received_withd_msg\">\n                    <p>\n                      Test which is a new approach to have all\n                      solutions\n                    </p>\n                    <span className=\"time_date\"> 11:01 AM    |    June 9</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"outgoing_msg\">\n                <div className=\"sent_msg\">\n                  <p>\n                    Test which is a new approach to have all\n                    solutions\n                  </p>\n                  <span className=\"time_date\"> 11:01 AM    |    June 9</span>\n                  {' '}\n\n                </div>\n              </div>\n              <div className=\"incoming_msg\">\n                <div className=\"incoming_msg_img\">\n                  {' '}\n                  <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" />\n                  {' '}\n                </div>\n                <div className=\"received_msg\">\n                  <div className=\"received_withd_msg\">\n                    <p>Test, which is a new approach to have</p>\n                    <span className=\"time_date\"> 11:01 AM    |    Yesterday</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"outgoing_msg\">\n                <div className=\"sent_msg\">\n                  <p>Apollo University, Delhi, India Test</p>\n                  <span className=\"time_date\"> 11:01 AM    |    Today</span>\n                  {' '}\n\n                </div>\n              </div>\n              <div className=\"incoming_msg\">\n                <div className=\"incoming_msg_img\">\n                  {' '}\n                  <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\" />\n                  {' '}\n                </div>\n                <div className=\"received_msg\">\n                  <div className=\"received_withd_msg\">\n                    <p>\n                      We work directly with our designers and suppliers,\n                      and sell direct to you, which means quality, exclusive\n                      products, at a price anyone can afford.\n                    </p>\n                    <span className=\"time_date\"> 11:01 AM    |    Today</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"type_msg\">\n              <div className=\"input_msg_write\">\n                <input type=\"text\" className=\"write_msg\" placeholder=\"Type a message\" />\n                <Button className=\"msg_send_btn\" onClick={handleSend}><i className=\"fa fa-paper-plane-o\" aria-hidden=\"true\" /></Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nexport default ChatroomPage;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\n\nimport ChatroomPage from './ChatroomPage';\n\nconst Login: React.FC = () => (\n  <Switch>\n    <Route path=\"/chat\">\n      <ChatroomPage />\n    </Route>\n  </Switch>\n);\n\nexport default Login;\n","import React from 'react';\nimport { Form, Col, Row } from 'react-bootstrap';\nimport { useField } from 'formik';\n\ninterface FormTextInputPropsType {\n  name: string;\n  label: string;\n  placeholder: string;\n  disabled: boolean;\n  type?: string;\n}\n\nconst FormTextInput: React.FC<FormTextInputPropsType> = ({\n  name,\n  label,\n  placeholder,\n  disabled,\n  type = 'input',\n}) => {\n  const [field, meta] = useField(name);\n  const isValid = !meta.touched || !meta.error;\n  return (\n    <Form.Group as={Row}>\n      <Form.Label column sm={4}>{label}</Form.Label>\n      <Col sm={8}>\n        <Form.Control\n          {...field} // eslint-disable-line react/jsx-props-no-spreading\n          type={type}\n          isInvalid={!isValid}\n          placeholder={placeholder}\n          disabled={disabled}\n        />\n        <Form.Control.Feedback type=\"invalid\">\n          {meta.error}\n        </Form.Control.Feedback>\n      </Col>\n    </Form.Group>\n  );\n};\n\nexport default FormTextInput;\n","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport { useField } from 'formik';\n\ninterface FormSelectPropsType {\n  name: string;\n  label: string;\n  placeholder: string;\n  disabled?: boolean;\n  type?: string;\n  children: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n}\n\nconst FormSelect: React.FC<FormSelectPropsType> = ({\n  name,\n  label,\n  placeholder,\n  children,\n  disabled = false,\n}) => {\n  const [field, meta] = useField(name);\n  const isValid = !meta.touched || !meta.error;\n  return (\n    <Form.Group as={Row}>\n      <Form.Label column sm={4}>{label}</Form.Label>\n      <Col sm={8}>\n        <Form.Control\n          {...field} // eslint-disable-line react/jsx-props-no-spreading\n          as=\"select\"\n          type=\"select\"\n          className=\"custom-select\"\n          isInvalid={!isValid}\n          disabled={disabled}\n        >\n          <option value=\"\">{placeholder}</option>\n          {children}\n        </Form.Control>\n        <Form.Control.Feedback type=\"invalid\">\n          {meta.error}\n        </Form.Control.Feedback>\n      </Col>\n    </Form.Group>\n  );\n};\n\nexport default FormSelect;\n","import React, { useEffect } from 'react';\nimport {\n  Container, Form, ListGroup, Button,\n} from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { AppState } from '../../app/redux/root-reducer';\nimport { settingsLoadReq, settingsUnload, settingsUpdateReq } from './redux/slice';\nimport {\n  SUCCESS, IDLE, FormType, FAILURE,\n} from './types';\nimport FormTextInput from '../../common/FormTextInput';\nimport FormSelect from '../../common/FormSelect';\nimport { USER, ADMIN } from '../login/types';\n\n// import './FormPage.css';\n\nconst settingsSchema = Yup.object().shape({\n  id: Yup.string()\n    .required('User ID is required'),\n  username: Yup.string()\n    .required('Username is required'),\n  email: Yup.string()\n    .email('Invalid Email')\n    .required('Email is required'),\n  group: Yup.string()\n    .required('Group is required'),\n  phone: Yup.string()\n    .required('Phone No. is required'),\n  password: Yup.string()\n    .min(6, 'Your password is too short')\n    .max(30, 'Your password is too long'),\n  password2: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match'),\n  oldPassword: Yup.string()\n    .required('Your current password is required to update your profile'),\n});\n\n\nconst SettingsForm: React.FC = () => {\n  const settingsLoadStatus = useSelector((state: AppState) => state.settings.status.load);\n  const settingsLoadErrors = useSelector((state: AppState) => state.settings.errors.load);\n  const settingsUpdateStatus = useSelector((state: AppState) => state.settings.status.update);\n  const settingsUpdateErrors = useSelector((state: AppState) => state.settings.errors.update);\n  const initialValues = useSelector((state:AppState) => state.settings.initialValues);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (settingsLoadStatus === IDLE) dispatch(settingsLoadReq());\n  }, [dispatch, settingsLoadStatus]);\n\n  useEffect(() => () => {\n    dispatch(settingsUnload());\n  }, [dispatch]);\n\n  const handleUpdate = (form: FormType) => {\n    dispatch(settingsUpdateReq({ form }));\n  };\n\n\n  const isLoaded = settingsLoadStatus === SUCCESS;\n\n\n  return (\n    <Container>\n      <h1>Update Settings</h1>\n      {settingsUpdateStatus === SUCCESS\n            && (\n              <ListGroup>\n                <ListGroup.Item variant=\"info\" key=\"update-success\">\n                  Update settings success\n                </ListGroup.Item>\n              </ListGroup>\n            )}\n      {settingsLoadStatus === FAILURE\n            && (\n              <ListGroup>\n                {settingsLoadErrors.map((err) => (\n                  <ListGroup.Item variant=\"danger\" key={`load-error-${err}`}>\n                    {err}\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            )}\n      {settingsUpdateStatus === FAILURE\n            && (\n              <ListGroup>\n                {settingsUpdateErrors.map((err) => (\n                  <ListGroup.Item variant=\"danger\" key={`update-error-${err}`}>\n                    {err}\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            )}\n      <Formik\n        enableReinitialize\n        initialValues={initialValues}\n        onSubmit={handleUpdate}\n        validationSchema={settingsSchema}\n      >\n        {({ handleSubmit, values, handleReset }) => (\n          <Form noValidate className=\"justify-content-center py-4\" onSubmit={handleSubmit}>\n            <FormTextInput\n              disabled\n              label=\"User ID: \"\n              name=\"id\"\n              placeholder=\"ID\"\n            />\n            <FormTextInput\n              disabled={!isLoaded}\n              label=\"Username:\"\n              name=\"username\"\n              placeholder=\"Username\"\n            />\n            <FormSelect\n              disabled={!isLoaded || initialValues.group !== ADMIN}\n              label=\"Group:\"\n              name=\"group\"\n              placeholder=\"Uesr Group\"\n            >\n              <option>{USER}</option>\n              <option>{ADMIN}</option>\n            </FormSelect>\n            <FormTextInput\n              disabled={!isLoaded}\n              label=\"Email:\"\n              name=\"email\"\n              placeholder=\"Email\"\n            />\n            <FormTextInput\n              disabled={!isLoaded}\n              label=\"Phone:\"\n              name=\"phone\"\n              placeholder=\"Phone No.\"\n            />\n            <FormTextInput\n              disabled={!isLoaded}\n              label=\"New Password:\"\n              name=\"password\"\n              placeholder=\"New Password\"\n              type=\"password\"\n            />\n            <FormTextInput\n              disabled={!isLoaded}\n              label=\"Enter Your Password Again:\"\n              name=\"password2\"\n              placeholder=\"Enter Your Password Again\"\n              type=\"password\"\n            />\n            <FormTextInput\n              disabled={!isLoaded}\n              type=\"password\"\n              label=\"Current Password:\"\n              name=\"oldPassword\"\n              placeholder=\"Current Password\"\n            />\n            <Form.Row className=\"justify-content-end\">\n              <Button\n                value=\"primary\"\n                type=\"button\"\n                onClick={handleReset}\n                className=\"mr-2\"\n              >\n                Reset\n              </Button>\n              <Button\n                value=\"primary\"\n                type=\"submit\"\n                className=\"mx-2\"\n              >\n                Submit\n              </Button>\n            </Form.Row>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default SettingsForm;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\n\nimport FormPage from './FormPage';\n\nconst Settings: React.FC = () => (\n  <Switch>\n    <Route path=\"/settings\">\n      <FormPage />\n    </Route>\n  </Switch>\n);\n\nexport default Settings;\n","import React, { useEffect, useState } from 'react';\nimport {\n  Table, Container, ListGroup, Button, Form,\n} from 'react-bootstrap';\nimport * as Yup from 'yup';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport { AppState } from '../../app/redux/root-reducer';\nimport {\n  usersListLoadReq, adminUnload, userLoadReq, userUpdateReq, userUnload, userDeleteReq,\n} from './redux/slice';\nimport {\n  IDLE, SUCCESS, FAILURE, FormType,\n} from './types';\n\nimport './TablePage.css';\nimport FormTextInput from '../../common/FormTextInput';\nimport FormSelect from '../../common/FormSelect';\nimport { USER, ADMIN } from '../login/types';\n\nconst updateSchema = Yup.object().shape({\n  id: Yup.string(),\n  username: Yup.string()\n    .required('Username is required'),\n  email: Yup.string()\n    .email('Invalid Email')\n    .required('Email is required'),\n  group: Yup.string()\n    .required('Group is required'),\n  phone: Yup.string()\n    .required('Phone No. is required'),\n  password: Yup.string()\n    .min(6, 'Your password is too short')\n    .max(30, 'Your password is too long'),\n  password2: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match'),\n});\n\nconst UsersTable: React.FC = () => {\n  const editorGroup = useSelector((state: AppState) => state.login.group);\n  const usersList = useSelector((state:AppState) => state.admin.usersList);\n  const initialValues = useSelector((state:AppState) => state.admin.initialValues);\n  const status = useSelector((state:AppState) => state.admin.status);\n  const errors = useSelector((state: AppState) => state.admin.errors);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (status.userLoad === IDLE || status.userUpdate === SUCCESS) dispatch(usersListLoadReq());\n  }, [dispatch, status.userLoad, status.userUpdate]);\n\n  useEffect(() => () => {\n    dispatch(adminUnload());\n  }, [dispatch]);\n\n  const [currentEdit, setCurrentEdit] = useState('');\n\n  const handleEdit = (id: string) => {\n    setCurrentEdit('Edit User');\n    dispatch(userLoadReq({ id }));\n  };\n\n  const handleAdd = () => {\n    setCurrentEdit('Add User');\n    dispatch(userUnload());\n  };\n\n  const handleDelete = (id: string) => {\n    setCurrentEdit('');\n    dispatch(userDeleteReq({ id }));\n  };\n\n  const handleCancel = () => {\n    setCurrentEdit('');\n    dispatch(userUnload());\n  };\n\n  const handleUpdate = (form: FormType) => {\n    dispatch(userUpdateReq({ form }));\n  };\n\n  const isAddUser = currentEdit === 'Add User';\n  const isUserLoaded = status.userLoad === SUCCESS;\n  const isEnable = isAddUser || isUserLoaded;\n\n\n  return (\n    <div>\n      <Container className=\"users-list\">\n        <h1>Users List</h1>\n        {status.usersListLoad === FAILURE\n            && (\n              <ListGroup>\n                {errors.usersListLoad.map((err) => (\n                  <ListGroup.Item variant=\"danger\" key={`update-error-${err}`}>\n                    {err}\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            )}\n        <Table responsive className=\"my-4\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Username</th>\n              <th>Group</th>\n              <th>User ID</th>\n              <th>Email</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {usersList.map((item, index) => (\n              <tr key={`user-${item.id}`}>\n                <td>{index + 1}</td>\n                <td>{item.username}</td>\n                <td>{item.group}</td>\n                <td>{item.id}</td>\n                <td>{item.email}</td>\n                <td>\n                  <Button onClick={() => handleEdit(item.id)} className=\"mx-1\">\n                    Edit\n                  </Button>\n                  <Button onClick={() => handleDelete(item.id)}>\n                    Delete\n                  </Button>\n                </td>\n              </tr>\n            ))}\n            <tr>\n              <td>{usersList.length + 1}</td>\n              <td>add a new user</td>\n              <td />\n              <td />\n              <td />\n              <td>\n                <Button onClick={handleAdd}>\n                  Add\n                </Button>\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      </Container>\n      {currentEdit !== ''\n      && (\n      <Container className=\"user-edit\">\n        <h1 className=\"form-message\">{currentEdit}</h1>\n        {status.userUpdate === SUCCESS\n            && (\n              <ListGroup>\n                <ListGroup.Item variant=\"info\" key=\"update-success\">\n                  Upload settings success\n                </ListGroup.Item>\n              </ListGroup>\n            )}\n        {status.userLoad === FAILURE\n            && (\n              <ListGroup>\n                {errors.userLoad.map((err) => (\n                  <ListGroup.Item variant=\"danger\" key={`load-error-${err}`}>\n                    {err}\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            )}\n        {status.userUpdate === FAILURE\n            && (\n              <ListGroup>\n                {errors.userUpdate.map((err) => (\n                  <ListGroup.Item variant=\"danger\" key={`update-error-${err}`}>\n                    {err}\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            )}\n        <Formik\n          enableReinitialize\n          initialValues={initialValues}\n          onSubmit={handleUpdate}\n          validationSchema={updateSchema}\n        >\n          {({ handleSubmit, values, handleReset }) => (\n            <Form noValidate className=\"justify-content-center py-4\" onSubmit={handleSubmit}>\n              {isAddUser\n                || (\n                <FormTextInput\n                  disabled\n                  label=\"User ID: \"\n                  name=\"id\"\n                  placeholder=\"ID\"\n                />\n                )}\n              <FormTextInput\n                disabled={!isEnable}\n                label=\"Username:\"\n                name=\"username\"\n                placeholder=\"Username\"\n              />\n              <FormSelect\n                disabled={!isEnable || editorGroup !== ADMIN}\n                label=\"Group:\"\n                name=\"group\"\n                placeholder=\"Uesr Group\"\n              >\n                <option>{USER}</option>\n                <option>{ADMIN}</option>\n              </FormSelect>\n              <FormTextInput\n                disabled={!isEnable}\n                label=\"Email:\"\n                name=\"email\"\n                placeholder=\"Email\"\n              />\n              <FormTextInput\n                disabled={!isEnable}\n                label=\"Phone:\"\n                name=\"phone\"\n                placeholder=\"Phone No.\"\n              />\n              <FormTextInput\n                disabled={!isEnable}\n                label=\"New Password:\"\n                name=\"password\"\n                placeholder=\"New Password\"\n                type=\"password\"\n              />\n              <FormTextInput\n                disabled={!isEnable}\n                label=\"Enter The Password Again:\"\n                name=\"password2\"\n                placeholder=\"Enter The Password Again\"\n                type=\"password\"\n              />\n              <Form.Row className=\"justify-content-end\">\n                {isAddUser\n                || (\n                <Button\n                  value=\"primary\"\n                  type=\"button\"\n                  onClick={() => handleDelete(values.id)}\n                  className=\"mr-2\"\n                >\n                  Delete\n                </Button>\n                )}\n                <Button\n                  value=\"primary\"\n                  type=\"button\"\n                  onClick={handleCancel}\n                  className=\"mx-2\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  value=\"primary\"\n                  type=\"button\"\n                  onClick={handleReset}\n                  className=\"mx-2\"\n                >\n                  Reset\n                </Button>\n                <Button\n                  value=\"primary\"\n                  type=\"submit\"\n                  className=\"mx-2\"\n                >\n                  Submit\n                </Button>\n              </Form.Row>\n            </Form>\n          )}\n        </Formik>\n\n\n      </Container>\n      )}\n    </div>\n  );\n};\n\nexport default UsersTable;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\n\nimport TablePage from './TablePage';\n\nconst Settings: React.FC = () => (\n  <Switch>\n    <Route path=\"/admin\">\n      <TablePage />\n    </Route>\n  </Switch>\n);\n\nexport default Settings;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { AppState } from '../app/redux/root-reducer';\nimport {\n  IDLE, LOADING, SUCCESS, GroupType,\n} from '../features/login/types';\n\ninterface ProtectedProps {\n  children?: React.ReactNode;\n  groups: GroupType[];\n}\n\nconst Protected: React.FC<ProtectedProps> = ({ children, groups: targetGroups }) => {\n  const recoverLoginStatus = useSelector((state: AppState) => state.login.status.recoverLogin);\n  const loginStatus = useSelector((state: AppState) => state.login.status.login);\n  const group = useSelector((state: AppState) => state.login.group);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (recoverLoginStatus !== IDLE && recoverLoginStatus !== LOADING && loginStatus !== SUCCESS && !targetGroups.includes(group)) {\n      dispatch(push('/login'));\n    }\n  }, [dispatch, group, loginStatus, recoverLoginStatus, targetGroups]);\n\n  return (\n    <>\n      {recoverLoginStatus !== IDLE && recoverLoginStatus !== LOADING && loginStatus === SUCCESS && children}\n    </>\n  );\n};\n\nexport default Protected;\n","import React, { useEffect } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport NavBar from '../features/navigationBar';\nimport Login from '../features/login';\nimport Logout from '../features/logout';\nimport Chat from '../features/chat';\nimport Settings from '../features/settings';\nimport Admin from '../features/admin';\n\nimport { recoverLoginReq } from '../features/login/redux/slice';\n\nimport './App.css';\nimport Protected from '../common/Protected';\nimport { ADMIN, USER } from '../features/login/types';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(recoverLoginReq());\n  }, [dispatch]);\n  return (\n    <div className=\"app container-fluid d-flex flex-column\">\n      <NavBar />\n      <Switch>\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n        <Route path=\"/logout\">\n          <Protected groups={[ADMIN, USER]}>\n            <Logout />\n          </Protected>\n        </Route>\n        <Route path=\"/chat\">\n          <Protected groups={[ADMIN, USER]}>\n            <Chat />\n          </Protected>\n        </Route>\n        <Route path=\"/settings\">\n          <Protected groups={[ADMIN, USER]}>\n            <Settings />\n          </Protected>\n        </Route>\n        <Route path=\"/admin\">\n          <Protected groups={[ADMIN]}>\n            <Admin />\n          </Protected>\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { CookiesProvider } from 'react-cookie';\n\nimport * as serviceWorker from './serviceWorker';\nimport store from './app/redux';\nimport history from './app/redux/history';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './app/App';\n\nconst Root: React.FC = () => (\n  <>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <CookiesProvider>\n          <App />\n        </CookiesProvider>\n      </ConnectedRouter>\n    </Provider>\n  </>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}